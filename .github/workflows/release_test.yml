name: Build Test Client

on:
  push:
    branches:
    - "release_test"

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: x86_64
            file_name: "${{ secrets.CDN_URL }}/${{ secrets.TEST_BUCKET_NAME }}/${{ secrets.TEST_PRODUCT_NAME }}-99.0.${{ github.run_id }}.dmg"
            file_extension: ".dmg"
            build_arg: "--mac --x64"
          - os: windows-latest
            file_extension: ".exe"
            file_name: "${{ secrets.CDN_URL }}/${{ secrets.TEST_BUCKET_NAME }}/${{ secrets.TEST_PRODUCT_NAME }}%20Setup%2099.0.${{ github.run_id }}.exe"
            build_arg: "--win --x64"
          - os: macos-latest
            arch: arm64
            file_name: "${{ secrets.CDN_URL }}/${{ secrets.TEST_BUCKET_NAME }}/${{ secrets.TEST_PRODUCT_NAME }}-99.0.${{ github.run_id }}-arm64.dmg"
            file_extension: ".dmg"
            build_arg: "--mac --arm64"
          - os: ubuntu-latest
            file_name: "${{ secrets.CDN_URL }}/${{ secrets.TEST_BUCKET_NAME }}/${{ secrets.TEST_PRODUCT_NAME }}-99.0.${{ github.run_id }}.AppImage"
            file_extension: ".AppImage"
            build_arg: "--linux"
    runs-on: ${{ matrix.os }}

    # 将release_test分支的代码检出（即复制）到 GitHub Actions 的运行环境中。
    steps:
      - name: Check out second repository
        uses: actions/checkout@v2
        with:
          repository: ${{ secrets.REPO_URL }}
          ref: ${{ secrets.TEST_REPO_BRANCH }}
          path: ${{ secrets.REPO_PATH }}


      # Output basic information
      - name: Print basic information
        run: |
          echo "current version: ${{ github.run_id }}"

      # Install jre Windows
      - name: Install Jre for Windows
        if: ${{ runner.os == 'Windows' }}
        uses: actions/setup-java@main
        with:
          java-version: "17"
          distribution: "temurin"
          java-package: "jre"

      # Install jre MacOS X64
      - name: Install Jre MacOS X64
        if: ${{ runner.os == 'macOS' && matrix.arch == 'x86_64' }}
        uses: actions/setup-java@main
        with:
          java-version: "17"
          distribution: "temurin"
          java-package: "jre"

      # Install jre MacOS arm64
      - name: Install Jre MacOS arm64
        if: ${{ runner.os == 'macOS' && matrix.arch == 'arm64' }}
        uses: actions/setup-java@main
        with:
          java-version: "17"
          distribution: "temurin"
          java-package: "jre"
          architecture: "aarch64"

          # Install jre Linux
      - name: Install Jre for Linux
        if: ${{ runner.os == 'Linux' }}
        uses: actions/setup-java@main
        with:
          java-version: "17"
          distribution: "temurin"
          java-package: "jre"

      # java.security open tls1 Windows
      - name: Enable tls1
        if: ${{ runner.os == 'Windows' }}
        run: |
          # sed -i '' "s/\(^jdk.tls.disabledAlgorithms=\)\(.*\)\( TLSv1, TLSv1.1,\)\(.*\)/\1\2\4/" "${{ env.JAVA_HOME }}/conf/security/java.security"
          $filePath = "${{ env.JAVA_HOME }}\conf\security\java.security"
          $content = Get-Content $filePath -Raw
          $updatedContent = $content -replace '^(jdk.tls.disabledAlgorithms=)(.*)( TLSv1, TLSv1.1,)(.*)', '$1$2$4'
          $updatedContent | Set-Content $filePath
        shell: pwsh

      # java.security open tls1 macOS
      - name: Enable tls1
        if: ${{ runner.os == 'macOS' }}
        run: |
          sed -i '' "s/\(^jdk.tls.disabledAlgorithms=\)\(.*\)\( TLSv1, TLSv1.1,\)\(.*\)/\1\2\4/" $JAVA_HOME/conf/security/java.security

      # Copy jre Windows
      - name: Copy Jre for Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          mkdir -p ${{ secrets.REPO_STATIC_PATH }} 
          cp -r "${{ env.JAVA_HOME }}" ${{ secrets.REPO_JRE_PATH }} 

      # Copy jre macOS
      - name: Copy Jre for macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          mkdir -p ${{ secrets.REPO_STATIC_PATH }} 
          cp -r $JAVA_HOME ${{ secrets.REPO_JRE_PATH }} 
          chmod -R 777 ${{ secrets.REPO_JRE_PATH }} 

      # Copy jre Linux
      - name: Copy Jre for Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir -p ${{ secrets.REPO_STATIC_PATH }} 
          cp -r $JAVA_HOME ${{ secrets.REPO_JRE_PATH }} 
          chmod -R 777 ${{ secrets.REPO_JRE_PATH }} 

      # Linux
      - name: Delete File
        if: ${{ runner.os == 'Linux' }}
        run: |
          cd ${{ secrets.REPO_JRE_PATH }} 
          ls -la
          rm -rf legal
          ls -la

      # 安装Node.js
      - name: Install Node.js
        uses: actions/setup-node@main
        with:
          node-version: "18.17.0"
          cache: "yarn"
          cache-dependency-path: ${{ secrets.REPO_YARN_PATH }}

      # 安装Maven
      - name: Install Java and Maven
        uses: actions/setup-java@main
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      # 打包依赖包
      - name: Check out first repository
        uses: actions/checkout@v2
        with:
          repository: ${{ secrets.REPO_BASE_URL }}
          ref: ${{ secrets.TEST_REPO_BASE_BRANCH }}
          path: ${{ secrets.REPO_BASE_PATH }}

      - name: MVN Build plugins
        run: |
          mvn clean install -B '-Dmaven.test.skip=true' -f ${{ secrets.REPO_BASE_POM_PATH }}

      # 打包后端工程 & 发送到前端
      - name: Build BE Static
        run: |
          mvn clean package -B '-Dmaven.test.skip=true' -f ${{ secrets.REPO_POM_PATH }}
          cp ${{ secrets.REPO_JAR_PATH }} ${{ secrets.REPO_STATIC_JAR_PATH }}

      # 打包Web前端资源
      - name: Build FE Static
        run: |
          cd ${{ secrets.REPO_FRONT_PATH }} 
          cd src/main
          yarn
          yarn run build
          cp -r electron ../../static
      

      # 打包桌面端前端资源
      - name: Prepare Build Electron
        run: |
          cd ${{ secrets.REPO_FRONT_PATH }}
          yarn run build:web:desktop --app_version=99.0.${{ github.run_id }} --app_port=${{ secrets.TEST_REPO_PORT }}
          cp -r dist ./static/
          rm -r dist

      # 打包Electron
      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: ${{ secrets.REPO_FRONT_PATH }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          mac_certs: ${{ secrets.MAC_CERTS }}
          mac_certs_password: ${{ secrets.MAC_CERTS_PASSWORD }}
          skip_build: true
          args: >
            -c.appId=${{ secrets.TEST_APP_ID }}
            -c.productName=${{ secrets.TEST_PRODUCT_NAME }}
            -c.win.publisherName=${{ secrets.TEST_PRODUCT_NAME }}
            -c.nsis.shortcutName=${{ secrets.TEST_PRODUCT_NAME }}
            -c.extraMetadata.version=99.0.${{ github.run_id }}
            ${{ matrix.build_arg}}

#      # 公证&签名 Mac App
#      - name: Notarize MacOS x86_64 App
#        if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
#        run: |
#          xcrun notarytool store-credentials ${{ secrets.PRODUCT_BASE_NAME }} --apple-id "${{ secrets.MAC_APPLE_ID }}" --password "${{ secrets.MAC_APPLE_PASSWORD }}" --team-id "${{ secrets.MAC_TEAM_ID }}"
#          xcrun notarytool submit ${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.TEST_PRODUCT_NAME }}-99.0.${{ github.run_id }}.dmg --keychain-profile ${{ secrets.PRODUCT_BASE_NAME }}
#
#      # 公证&签名 Mac App
#      - name: Notarize MacOS ARM App
#        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
#        run: |
#          xcrun notarytool store-credentials ${{ secrets.PRODUCT_BASE_NAME }} --apple-id "${{ secrets.MAC_APPLE_ID }}" --password "${{ secrets.MAC_APPLE_PASSWORD }}" --team-id "${{ secrets.MAC_TEAM_ID }}"
#          xcrun notarytool submit ${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.TEST_PRODUCT_NAME }}-99.0.${{ github.run_id }}-arm64.dmg --keychain-profile ${{ secrets.PRODUCT_BASE_NAME }}

      # 准备发往OSS的文件
      - name: Prepare upload for OSS
        run: |
          mkdir -p oss_temp_file
          cp -r ${{ secrets.REPO_FRONT_PATH }}/release/*${{ matrix.file_extension }} ./oss_temp_file

      # 设置OSS
      - name: Set up oss utils
        uses: yizhoumo/setup-ossutil@v1
        with:
          endpoint: ${{ secrets.OSS_ENDPOINT }}
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          ossutil-version: "1.7.16"


      # 上传到OSS
      - name: Upload to OSS
        run: |
          ossutil cp -rf --acl=public-read ./oss_temp_file/ oss://${{ secrets.TEST_BUCKET_NAME }}/99.0.${{ github.run_id }}/


      # 发送到DingTalk
      - name: Send dingtalk message
        uses: ghostoy/dingtalk-action@master
        with:
          webhook: ${{ secrets.DINGTALK_WEBHOOK }}
          msgtype: markdown
          content: |
            {
              "title": "${{ matrix.os }}-${{ secrets.TEST_BUCKET_NAME }}-打包完成通知",
              "text": "# ${{ matrix.os }}-${{ secrets.TEST_BUCKET_NAME }}-打包完成通知\n ![bang](https://oss.sqlgpt.cn/static/bang100.gif)\n ###  任务id：[${{ github.run_id }}](https://github.com/juliet0416/cicd-test/actions/runs/${{ github.run_id }})\n ### 下载地址：[${{matrix.file_name}}](${{matrix.file_name}})"
            }
