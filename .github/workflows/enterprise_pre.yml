name: Build Enterprise Pre Client

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      version:
        description: 'Version number'
        required: true
        default: '1.0.0'

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            file_extension: ".exe"
            file_name: "latest.exe"
            build_arg: "--win --x64"
          - os: macos-latest
            arch: x86_64
            file_name: "latest.dmg"
            file_extension: "-x64.dmg"
            build_arg: "--mac --x64"
          - os: macos-latest
            arch: arm64
            file_name: "arm64-latest.dmg"
            file_extension: "-arm64.dmg"
            build_arg: "--mac --arm64"
          # - os: ubuntu-latest
          #   arch: x86_64
          #   file_names: ["latest.deb", "latest.rpm", "latest.AppImage"]
          #   file_extensions: [".deb", ".rpm", ".AppImage"]
          #   build_arg: "--linux --x64"
          # - os: ubuntu-latest
          #   arch: arm64
          #   file_names: ["arm64-latest.deb", "arm64-latest.rpm", "arm64-latest.AppImage"]
          #   file_extensions: [".deb", ".rpm", ".AppImage"]
          #   build_arg: "--linux --arm64"
    
    # 这里是作业级别的条件，用于筛选要运行的作业
    runs-on: ${{ matrix.os }}

    # 将release_test分支的代码检出（即复制）到 GitHub Actions 的运行环境中。
    steps:
      - name: Check out second repository
        uses: actions/checkout@v2
        with:
          repository: ${{ secrets.REPO_URL }}
          ref: ${{ secrets.ENTERPRISE_TEST_REPO_BRANCH }}
          path: ${{ secrets.REPO_PATH }}
          token: ${{ secrets.ACCESS_TOKEN }}


      # Output basic information
      - name: Print basic information
        run: |
          echo "current version: ${{ github.run_id }}"

      # Install jre Windows
      - name: Install Jre for Windows
        if: ${{ runner.os == 'Windows' }}
        uses: actions/setup-java@main
        with:
          java-version: "17"
          distribution: "temurin"
          java-package: "jre"

      # Install jre MacOS X64
      - name: Install Jre MacOS X64
        if: ${{ runner.os == 'macOS' && matrix.arch == 'x86_64' }}
        uses: actions/setup-java@v2
        with:
          java-version: "17"
          distribution: "temurin"
          java-package: "jre"
          architecture: 'x64'

      # Install jre MacOS arm64
      - name: Install Jre MacOS arm64
        if: ${{ runner.os == 'macOS' && matrix.arch == 'arm64' }}
        uses: actions/setup-java@main
        with:
          java-version: "17"
          distribution: "temurin"
          java-package: "jre"
          architecture: "aarch64"

      # Install jre Linux x64
      - name: Install Jre for Linux
        if: ${{ runner.os == 'Linux' && matrix.arch == 'x86_64' }}
        uses: actions/setup-java@main
        with:
          java-version: "17"
          distribution: "temurin"
          java-package: "jre"


      # Install jre Linux arm64
      - name: Install Jre for Linux
        if: ${{ runner.os == 'Linux' && matrix.arch == 'arm64' }}
        uses: actions/setup-java@main
        with:
          java-version: "17"
          distribution: "temurin"
          java-package: "jre"
          architecture: "aarch64"

      # java.security open tls1 Windows
      - name: Enable tls1
        if: ${{ runner.os == 'Windows' }}
        run: |
          # sed -i '' "s/\(^jdk.tls.disabledAlgorithms=\)\(.*\)\( TLSv1, TLSv1.1,\)\(.*\)/\1\2\4/" "${{ env.JAVA_HOME }}/conf/security/java.security"
          $filePath = "${{ env.JAVA_HOME }}\conf\security\java.security"
          $content = Get-Content $filePath -Raw
          $updatedContent = $content -replace '(?s)(jdk.tls.disabledAlgorithms\s*=\s*)(.*?)(\s*TLSv1,\s*TLSv1\.1,)(.*?)(?=[,\r\n])', '$1$2$4'

          $updatedContent | Set-Content $filePath
          Write-Output "Original content:"
          Write-Output $content
          
          # 打印修改后的内容确认替换是否生效
          Write-Output "Updated content:"
          Write-Output $updatedContent

        shell: pwsh

      # java.security open tls1 macOS
      - name: Enable tls1
        if: ${{ runner.os == 'macOS' }}
        run: |
          sed -i '' "s/\(^jdk.tls.disabledAlgorithms=\)\(.*\)\( TLSv1, TLSv1.1,\)\(.*\)/\1\2\4/" $JAVA_HOME/conf/security/java.security

      # Copy jre Windows
      - name: Copy Jre for Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          mkdir -p ${{ secrets.REPO_STATIC_PATH }} 
          cp -r "${{ env.JAVA_HOME }}" ${{ secrets.REPO_JRE_PATH }} 

      # Copy jre macOS
      - name: Copy Jre for macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          mkdir -p ${{ secrets.REPO_STATIC_PATH }} 
          cp -r $JAVA_HOME ${{ secrets.REPO_JRE_PATH }} 
          chmod -R 777 ${{ secrets.REPO_JRE_PATH }} 

      # Copy jre Linux
      - name: Copy Jre for Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir -p ${{ secrets.REPO_STATIC_PATH }} 
          cp -r $JAVA_HOME ${{ secrets.REPO_JRE_PATH }} 
          chmod -R 777 ${{ secrets.REPO_JRE_PATH }} 

      # Linux
      - name: Delete File
        if: ${{ runner.os == 'Linux' }}
        run: |
          cd ${{ secrets.REPO_JRE_PATH }} 
          ls -la
          rm -rf legal
          ls -la

      # 安装Node.js
      - name: Install Node.js
        uses: actions/setup-node@main
        with:
          node-version: "18.17.0"
          cache: "yarn"
          cache-dependency-path: ${{ secrets.REPO_YARN_PATH }}

      # 安装Maven
      - name: Install Java and Maven
        uses: actions/setup-java@main
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      # 打包依赖包
      # - name: Check out first repository
      #   uses: actions/checkout@v2
      #   with:
      #     repository: ${{ secrets.REPO_BASE_URL }}
      #     ref: ${{ secrets.TEST_REPO_BASE_BRANCH }}
      #     path: ${{ secrets.REPO_BASE_PATH }}
          
      # - name: Check out sqlParser repository
      #   uses: actions/checkout@v2
      #   with:
      #     repository: ${{ secrets.SQL_PARSER_BASE_URL }}
      #     ref: ${{ secrets.SQL_PARSER_REPO_BASE_BRANCH }}
      #     path: ${{ secrets.SQL_PARSER_REPO_BASE_PATH }}
      #     token: ${{ secrets.ACCESS_TOKEN }}

          
      # - name: MVN Build plugins1
      #   run: |
      #     mvn clean install -B '-Dmaven.test.skip=true' -f ${{ secrets.REPO_BASE_POM_PATH }}

      # 打包后端工程 & 发送到前端
      - name: Build BE Static
        run: |
          mvn clean install -U -B '-Dmaven.test.skip=true' -f ${{ secrets.REPO_POM_PATH }}
          cp ${{ secrets.REPO_JAR_PATH }} ${{ secrets.REPO_STATIC_JAR_PATH }}

      # 打包Web前端资源
      - name: Build FE Static
        run: |
          cd ${{ secrets.REPO_FRONT_PATH }} 
          cd src/main
          yarn
          yarn run build:enterprise
          cp -r electron ../../static
      

      # 打包桌面端前端资源
      - name: Prepare Build Electron
        run: |
          cd ${{ secrets.REPO_FRONT_PATH }}
          yarn
          yarn run modify:package:name qdataai
          yarn run build:desktop --app_version=${{ github.event.inputs.version }}
          cp -r dist ./static/


      # 打包Electron
      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: ${{ secrets.REPO_FRONT_PATH }}
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          mac_certs: ${{ secrets.MAC_CERTS }}
          mac_certs_password: ${{ secrets.MAC_CERTS_PASSWORD }}
          skip_build: true
          args: >
            -c.appId=${{ secrets.ENTERPRISE_APP_ID }}
            -c.productName="${{ secrets.ENTERPRISE_PRODUCT_NAME }}"
            -c.win.publisherName="${{ secrets.ENTERPRISE_PUBLISHER_NAME }}"
            -c.nsis.shortcutName="${{ secrets.ENTERPRISE_PRODUCT_NAME }}"
            -c.extraMetadata.version=${{ github.event.inputs.version }}
            ${{ matrix.build_arg }}

      # 打印release目录下的文件
      - name: List release directory
        if: matrix.os == 'macos-latest'
        run: |
          ls -la ${{ secrets.REPO_FRONT_PATH }}/release/

      # Windows下打印release目录文件
      - name: List release directory (Windows)
        if: matrix.os == 'windows-latest' 
        run: |
          dir "${{ secrets.REPO_FRONT_PATH }}\release"

  

      # 公证&签名 Mac App
      - name: Notarize MacOS x86_64 App
        if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
        run: |
          xcrun notarytool store-credentials ${{ secrets.PRODUCT_BASE_NAME }} --apple-id "${{ secrets.MAC_APPLE_ID }}" --password "${{ secrets.MAC_APPLE_PASSWORD }}" --team-id "${{ secrets.MAC_TEAM_ID }}"
          xcrun notarytool submit ${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-x64.dmg --keychain-profile ${{ secrets.PRODUCT_BASE_NAME }}

      # 公证&签名 Mac App
      - name: Notarize MacOS ARM App
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: |
          xcrun notarytool store-credentials ${{ secrets.PRODUCT_BASE_NAME }} --apple-id "${{ secrets.MAC_APPLE_ID }}" --password "${{ secrets.MAC_APPLE_PASSWORD }}" --team-id "${{ secrets.MAC_TEAM_ID }}"
          xcrun notarytool submit ${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-arm64.dmg --keychain-profile ${{ secrets.PRODUCT_BASE_NAME }}

      # 设置OSS
      - name: Set up oss utils
        uses: yizhoumo/setup-ossutil@v1
        with:
          endpoint: ${{ secrets.OSS_ENDPOINT }}
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          ossutil-version: "1.7.16"

      # 上传文件到OSS准备
      - name: Upload to OSS for windows
        if: matrix.os == 'windows-latest'
        run: |
          ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}.exe" "oss://${{ secrets.BUCKET_NAME }}/enterprise/${{ github.event.inputs.version }}/"

      # 上传到OSS
      - name: Upload to OSS for Mac
        if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
        run: |
          ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-x64.dmg" "oss://${{ secrets.BUCKET_NAME }}/enterprise/${{ github.event.inputs.version }}/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-x64.zip" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/mac/x64/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-x64.zip.blockmap" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/mac/x64/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/latest-mac.yml" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/mac/x64/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-x64.dmg" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-latest.dmg"

      - name: Upload to OSS for Mac arm64
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: |
          ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-arm64.dmg" "oss://${{ secrets.BUCKET_NAME }}/enterprise/${{ github.event.inputs.version }}/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-arm64.zip" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/mac/arm64/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-arm64.zip.blockmap" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/mac/arm64/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/latest-mac.yml" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/mac/arm64/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-arm64.dmg" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-arm64-latest.dmg"

      - name: Upload to OSS for windows
        if: matrix.os == 'windows-latest'
        run: |
          ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/latest.yml" "oss://${{ secrets.BUCKET_NAME }}/enterprise/${{ github.event.inputs.version }}/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/latest.yml" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/windows/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}.exe" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/windows/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}.exe" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-latest.exe"

      - name: Upload to OSS for linux x86_64
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
        run: |
          ossutil cp -rf ${{ secrets.REPO_FRONT_PATH }}/release/*.deb "oss://${{ secrets.BUCKET_NAME }}/enterprise/${{ github.event.inputs.version }}/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-x86_64.deb"
          ossutil cp -rf ${{ secrets.REPO_FRONT_PATH }}/release/*.rpm "oss://${{ secrets.BUCKET_NAME }}/enterprise/${{ github.event.inputs.version }}/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-x86_64.rpm"
          ossutil cp -rf ${{ secrets.REPO_FRONT_PATH }}/release/*.AppImage "oss://${{ secrets.BUCKET_NAME }}/enterprise/${{ github.event.inputs.version }}/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-x86_64.AppImage"
         
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-x86_64.AppImage" "oss://${{ secrets.BUCKET_NAME }}/download/${{ github.event.inputs.version }}/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-x86_64.AppImage" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/linux/x86_64/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/latest-linux.yml" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/linux/x86_64/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-x86_64.AppImage" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-latest.AppImage"

      - name: Upload to OSS for linux arm64
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          ossutil cp -rf ${{ secrets.REPO_FRONT_PATH }}/release/*.deb "oss://${{ secrets.BUCKET_NAME }}/enterprise/${{ github.event.inputs.version }}/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-arm64.deb"
          ossutil cp -rf ${{ secrets.REPO_FRONT_PATH }}/release/*.rpm "oss://${{ secrets.BUCKET_NAME }}/enterprise/${{ github.event.inputs.version }}/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-arm64.rpm"
          ossutil cp -rf ${{ secrets.REPO_FRONT_PATH }}/release/*.AppImage "oss://${{ secrets.BUCKET_NAME }}/enterprise/${{ github.event.inputs.version }}/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-arm64.AppImage"
          
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-arm64.AppImage" "oss://${{ secrets.BUCKET_NAME }}/download/${{ github.event.inputs.version }}/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-arm64.AppImage" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/linux/arm64/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/latest-linux-arm64.yml" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/linux/arm64/"
          # ossutil cp -rf "${{ secrets.REPO_FRONT_PATH }}/release/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-arm64.AppImage" "oss://${{ secrets.BUCKET_NAME }}/download/test/latest/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-arm64-latest.AppImage"


      # 发送到DingTalk
      - name: Send dingtalk message
        uses: ghostoy/dingtalk-action@master
        with:
          webhook: ${{ secrets.DINGTALK_WEBHOOK }}
          msgtype: markdown
          content: |
            {
              "title": "${{ secrets.ENTERPRISE_PRODUCT_NAME }}-Pre-${{ github.event.inputs.version }}${{ matrix.file_extension }}-打包完成通知",
              "text": "# ${{ secrets.ENTERPRISE_PRODUCT_NAME }}-Pre-${{ github.event.inputs.version }}${{ matrix.file_extension }}-打包完成通知\n ###  任务id：[Pre-${{ github.event.inputs.version }}](https://github.com/juliet0416/cicd-test/actions/runs/${{ github.run_id }})\n ### 下载地址：${{secrets.CDN_URL}}/enterprise/${{ github.event.inputs.version }}/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}${{ matrix.file_extension }}"
            }

      # 发送到飞书
      - name: Send feishu message
        uses: foxundermoon/feishu-action@v2
        if: always()
        with:
          url: ${{ secrets.FEISHU_WEBHOOK }}
          msg_type: post
          content: |
            post:
              zh_cn:
                title: "${{ secrets.ENTERPRISE_PRODUCT_NAME }} ${{ github.event.inputs.version }} ${{ runner.os }} ${{ matrix.arch }} 打包${{ job.status == 'success' && '完成' || '失败' }}通知"
                content:
                - - tag: text
                    text: "任务id："
                  - tag: a
                    text: "Pre-${{ github.event.inputs.version }}"
                    href: "https://github.com/juliet0416/cicd-test/actions/runs/${{ github.run_id }}"
                - - tag: text
                    text: "状态: ${{ job.status == 'success' && '✅ 成功' || '❌ 失败' }}"
                - - tag: text
                    text: "下载地址：${{secrets.CDN_URL}}/enterprise/${{ github.event.inputs.version }}/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}${{ matrix.file_extension }}"

      - name: Send feishu message
        uses: foxundermoon/feishu-action@v2
        if: ${{ runner.os == 'Linux' }}
        with:
          url: ${{ secrets.FEISHU_WEBHOOK }}
          msg_type: post
          content: |
            post:
              zh_cn:
                title: "${{ secrets.ENTERPRISE_PRODUCT_NAME }} ${{ github.event.inputs.version }} ${{ runner.os }} ${{ matrix.arch }} 打包完成通知"
                content:
                - - tag: text
                    text: "任务ID: "
                  - tag: a
                    text: "${{ github.run_id }}"
                    href: "https://github.com/juliet0416/cicd-test/actions/runs/${{ github.run_id }}"
                - - tag: text
                    text: "下载地址: ${{secrets.CDN_URL}}/enterprise/${{ github.event.inputs.version }}/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-${{ matrix.arch }}.deb"
                - - tag: text
                    text: "下载地址: ${{secrets.CDN_URL}}/enterprise/${{ github.event.inputs.version }}/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-${{ matrix.arch }}.rpm"
                - - tag: text
                    text: "下载地址: ${{secrets.CDN_URL}}/enterprise/${{ github.event.inputs.version }}/${{ secrets.ENTERPRISE_PRODUCT_NAME }}-${{ github.event.inputs.version }}-${{ matrix.arch }}.AppImage"
